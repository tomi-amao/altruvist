// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  userTitle          String?
  zitadelId          String             @unique
  email              String
  name               String
  skills             String[]
  preferredCharities String[]
  bio                String?
  profilePicture     String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  taskApplications   taskApplications[]
  locale             String
  roles              String[]
  permissions        String[]
  charity            charities?         @relation(fields: [charityId], references: [id])
  charityId          String?            @db.ObjectId
  tasks              tasks[]
  comments           comment[]
}

model charities {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  website       String?
  contactPerson String?
  contactEmail  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tasks         tasks[]
  users         users[]
  tags          String[]

  taskApplications taskApplications[]
}

model tasks {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  impact           String
  requiredSkills   String[]
  estimatedHours   Int?
  category         String[]
  urgency          TaskUrgency?
  volunteersNeeded Int
  deliverables     String[]
  deadline         DateTime
  resources        resource[]
  charity          charities?         @relation(fields: [charityId], references: [id])
  charityId        String?            @db.ObjectId
  createdBy        users              @relation(fields: [userId], references: [id])
  userId           String             @db.ObjectId
  status           TaskStatus?
  location         TaskLocation?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  taskApplications taskApplications[]
  comments         comment[]
}

model taskApplications {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  task      tasks             @relation(fields: [taskId], references: [id])
  taskId    String            @db.ObjectId
  user      users             @relation(fields: [userId], references: [id])
  userId    String            @db.ObjectId
  charity   charities?        @relation(fields: [charityId], references: [id])
  charityId String?           @db.ObjectId
  status    ApplicationStatus
  message   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

// type taskApplications {
//   status    ApplicationStatus
//   message   String?
//   userId    String?           @db.ObjectId
//   taskId    String?           @db.ObjectId
//   createdAt DateTime          @default(now())
//   updatedAt DateTime
// }

type resource {
  name      String?
  extension String?
  type      String?
  size      Int?
  uploadURL String?
}

model comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  taskId    String    @db.ObjectId
  task      tasks     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  user      users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?   @db.ObjectId // Nullable for top-level comments
  parent    comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   comment[] @relation("CommentReplies") // Self-referencing relation for nested comments
}

enum TaskCategory {
  WEB_DEVELOPMENT
  MOBILE_APP
  DATA_ANALYSIS
  UX_UI_DESIGN
  OTHER
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum TaskUrgency {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  INCOMPLETE
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NOT_STARTED
}

enum TaskLocation {
  REMOTE
  ONSITE
  HYBRID
}

enum CommunicationPreference {
  EMAIL
  MESSAGE
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}
